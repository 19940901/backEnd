--------------------------------------------aim-----------------------------------------------
 * CPU 2700x   +main board   x470           3199    compute processing unit
 * GPU 11                                   2000     graphics processing unit

 * power supply                              999
 * case                                      400
 * memory                                   1200
 * ssd                                       400     Solid state hard disk
 * hd                                        300        hard disk
 * screen                                   2500
 * cooling fan                               100
 * ----------------------------------------------
 * sum                                     11399
---------------------------------------------github-----------------------------------------
git 创建ssh公钥与私钥并连接github

git config --global user.name "19940901"
git config --global user.email "2587877008@qq.com"
ssh-keygen -t rsa -C "2587877008@qq.com"
ssh git@github.com
将公钥添加到github的ssh key里面

@deleteMapping @putMapping
参数前需要添加@requestBody 可以接收(text,json)并转换为string和实体类，但无法接收int

enum枚举类的自定义属性 E.A.getName()
enum E{
    A("a",12);
    private string name;
    private int age;
    public E(string name,int age){
        this.name=name;
        this.age=age;
    }
    public void getName(){
        return name;
    }
    public void getAge(){
        return age;
    }
}

----------------------------------------------tomcat----------------------------------

当一个进程有 500 个线程在跑的话，那性能已经是很低很低了。Tomcat 默认配置的最大请求数是 150，也就是说同时支持 150 个并发，
当然了，也可以将其改大。
当某个应用拥有 250 个以上并发的时候，应考虑应用服务器的集群。
具体能承载多少并发，需要看硬件的配置，CPU 越多性能越高，分配给 JVM 的内存越多性能也就越高，但也会加重 GC 的负担。
操作系统对于进程中的线程数有一定的限制：
Windows 每个进程中的线程数不允许超过 2000
Linux 每个进程中的线程数不允许超过 1000另外，在 Java 中每开启一个线程需要耗用 1MB 的 JVM 内存空间用于作为线程栈之用。
Tomcat的最大并发数是可以配置的，实际运用中，最大并发数与硬件性能和CPU数量都有很大关系的。更好的硬件，
更多的处理器都会使Tomcat支持更多的并发。
Tomcat 默认的 HTTP 实现是采用阻塞式的 Socket 通信，每个请求都需要创建一个线程处理。这种模式下的并发量受到线程数的限制，
但对于 Tomcat 来说几乎没有 BUG 存在了。
Tomcat 还可以配置 NIO 方式的 Socket 通信，在性能上高于阻塞式的，每个请求也不需要创建一个线程进行处理，并发能力比前者高。
但没有阻塞式的成熟。
这个并发能力还与应用的逻辑密切相关，如果逻辑很复杂需要大量的计算，那并发能力势必会下降。如果每个请求都含有很多的数据库操作，
那么对于数据库的性能也是非常高的。对于单台数据库服务器来说，允许客户端的连接数量是有限制的。
并发能力问题涉及整个系统架构和业务逻辑。
系统环境不同，Tomcat版本不同、JDK版本不同、以及修改的设定参数不同。并发量的差异还是满大的。
maxThreads="1000" 最大并发数
minSpareThreads="100"///初始化时创建的线程数
maxSpareThreads="500"///一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket线程。
acceptCount="700"// 指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理


远程调试
    catalina.sh
    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000
    ./catalina.sh start

查看端口
netstat -ntlp

lsof -i tcp:80

ps pid


----------------------------------mysql-----------------------------------------------


查看log
tail -n 100 /var/log/mysqld.log

启动
systemctl status mysqld

开机启动
systemctl enable mysqld
systemctl daemon-reload


----------------------------springboot---------------------------------------------
dao层一个接口@repository，service层一个类@autowired注入dao层接口实现所有的service

@ControllerAdvice 统一异常处理
@aspect 切面类

@restContoller  //适用返回非静态资源
@controller  //适用于web



---------------------------------------jackson--------------------------------------------------------------
dev环境需要2.6.0版本，服务器版本需要用到2.9.0
json转为object需要用mapper.readvalue(),object转为json需要用mapper.writeVlueAsString();

